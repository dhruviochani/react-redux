{"ast":null,"code":"var __spreadArrays = this && this.__spreadArrays || function () {\n  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\n\n  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];\n\n  return r;\n};\n\nimport { isPluralElement, isLiteralElement, isSelectElement } from './types';\nimport { pegParse } from './parser';\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\n/**\r\n * Whether to convert `#` in plural rule options\r\n * to `{var, number}`\r\n * @param el AST Element\r\n * @param pluralStack current plural stack\r\n */\n\nexport function normalizeHashtagInPlural(els) {\n  els.forEach(function (el) {\n    // If we're encountering a plural el\n    if (!isPluralElement(el) && !isSelectElement(el)) {\n      return;\n    } // Go down the options and search for # in any literal element\n\n\n    Object.keys(el.options).forEach(function (id) {\n      var _a;\n\n      var opt = el.options[id]; // If we got a match, we have to split this\n      // and inject a NumberElement in the middle\n\n      var matchingLiteralElIndex = -1;\n      var literalEl = undefined;\n\n      for (var i = 0; i < opt.value.length; i++) {\n        var el_1 = opt.value[i];\n\n        if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\n          matchingLiteralElIndex = i;\n          literalEl = el_1;\n          break;\n        }\n      }\n\n      if (literalEl) {\n        var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\n        var newEls = pegParse(newValue);\n\n        (_a = opt.value).splice.apply(_a, __spreadArrays([matchingLiteralElIndex, 1], newEls));\n      }\n\n      normalizeHashtagInPlural(opt.value);\n    });\n  });\n}","map":{"version":3,"sources":["C:/Users/91987/Desktop/Newput/needy_red/react-redux/node_modules/intl-messageformat-parser/lib/src/normalize.js"],"names":["__spreadArrays","s","i","il","arguments","length","r","Array","k","a","j","jl","isPluralElement","isLiteralElement","isSelectElement","pegParse","PLURAL_HASHTAG_REGEX","normalizeHashtagInPlural","els","forEach","el","Object","keys","options","id","_a","opt","matchingLiteralElIndex","literalEl","undefined","value","el_1","test","newValue","replace","newEls","splice","apply"],"mappings":"AAAA,IAAIA,cAAc,GAAI,QAAQ,KAAKA,cAAd,IAAiC,YAAY;AAC9D,OAAK,IAAIC,CAAC,GAAG,CAAR,EAAWC,CAAC,GAAG,CAAf,EAAkBC,EAAE,GAAGC,SAAS,CAACC,MAAtC,EAA8CH,CAAC,GAAGC,EAAlD,EAAsDD,CAAC,EAAvD,EAA2DD,CAAC,IAAIG,SAAS,CAACF,CAAD,CAAT,CAAaG,MAAlB;;AAC3D,OAAK,IAAIC,CAAC,GAAGC,KAAK,CAACN,CAAD,CAAb,EAAkBO,CAAC,GAAG,CAAtB,EAAyBN,CAAC,GAAG,CAAlC,EAAqCA,CAAC,GAAGC,EAAzC,EAA6CD,CAAC,EAA9C,EACI,KAAK,IAAIO,CAAC,GAAGL,SAAS,CAACF,CAAD,CAAjB,EAAsBQ,CAAC,GAAG,CAA1B,EAA6BC,EAAE,GAAGF,CAAC,CAACJ,MAAzC,EAAiDK,CAAC,GAAGC,EAArD,EAAyDD,CAAC,IAAIF,CAAC,EAA/D,EACIF,CAAC,CAACE,CAAD,CAAD,GAAOC,CAAC,CAACC,CAAD,CAAR;;AACR,SAAOJ,CAAP;AACH,CAND;;AAOA,SAASM,eAAT,EAA0BC,gBAA1B,EAA4CC,eAA5C,QAAoE,SAApE;AACA,SAASC,QAAT,QAAyB,UAAzB;AACA,IAAIC,oBAAoB,GAAG,aAA3B;AACA;;;;;;;AAMA,OAAO,SAASC,wBAAT,CAAkCC,GAAlC,EAAuC;AAC1CA,EAAAA,GAAG,CAACC,OAAJ,CAAY,UAAUC,EAAV,EAAc;AACtB;AACA,QAAI,CAACR,eAAe,CAACQ,EAAD,CAAhB,IAAwB,CAACN,eAAe,CAACM,EAAD,CAA5C,EAAkD;AAC9C;AACH,KAJqB,CAKtB;;;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYF,EAAE,CAACG,OAAf,EAAwBJ,OAAxB,CAAgC,UAAUK,EAAV,EAAc;AAC1C,UAAIC,EAAJ;;AACA,UAAIC,GAAG,GAAGN,EAAE,CAACG,OAAH,CAAWC,EAAX,CAAV,CAF0C,CAG1C;AACA;;AACA,UAAIG,sBAAsB,GAAG,CAAC,CAA9B;AACA,UAAIC,SAAS,GAAGC,SAAhB;;AACA,WAAK,IAAI3B,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGwB,GAAG,CAACI,KAAJ,CAAUzB,MAA9B,EAAsCH,CAAC,EAAvC,EAA2C;AACvC,YAAI6B,IAAI,GAAGL,GAAG,CAACI,KAAJ,CAAU5B,CAAV,CAAX;;AACA,YAAIW,gBAAgB,CAACkB,IAAD,CAAhB,IAA0Bf,oBAAoB,CAACgB,IAArB,CAA0BD,IAAI,CAACD,KAA/B,CAA9B,EAAqE;AACjEH,UAAAA,sBAAsB,GAAGzB,CAAzB;AACA0B,UAAAA,SAAS,GAAGG,IAAZ;AACA;AACH;AACJ;;AACD,UAAIH,SAAJ,EAAe;AACX,YAAIK,QAAQ,GAAGL,SAAS,CAACE,KAAV,CAAgBI,OAAhB,CAAwBlB,oBAAxB,EAA8C,QAAQI,EAAE,CAACU,KAAX,GAAmB,WAAjE,CAAf;AACA,YAAIK,MAAM,GAAGpB,QAAQ,CAACkB,QAAD,CAArB;;AACA,SAACR,EAAE,GAAGC,GAAG,CAACI,KAAV,EAAiBM,MAAjB,CAAwBC,KAAxB,CAA8BZ,EAA9B,EAAkCzB,cAAc,CAAC,CAAC2B,sBAAD,EAAyB,CAAzB,CAAD,EAA8BQ,MAA9B,CAAhD;AACH;;AACDlB,MAAAA,wBAAwB,CAACS,GAAG,CAACI,KAAL,CAAxB;AACH,KArBD;AAsBH,GA5BD;AA6BH","sourcesContent":["var __spreadArrays = (this && this.__spreadArrays) || function () {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\nimport { isPluralElement, isLiteralElement, isSelectElement, } from './types';\r\nimport { pegParse } from './parser';\r\nvar PLURAL_HASHTAG_REGEX = /(^|[^\\\\])#/g;\r\n/**\r\n * Whether to convert `#` in plural rule options\r\n * to `{var, number}`\r\n * @param el AST Element\r\n * @param pluralStack current plural stack\r\n */\r\nexport function normalizeHashtagInPlural(els) {\r\n    els.forEach(function (el) {\r\n        // If we're encountering a plural el\r\n        if (!isPluralElement(el) && !isSelectElement(el)) {\r\n            return;\r\n        }\r\n        // Go down the options and search for # in any literal element\r\n        Object.keys(el.options).forEach(function (id) {\r\n            var _a;\r\n            var opt = el.options[id];\r\n            // If we got a match, we have to split this\r\n            // and inject a NumberElement in the middle\r\n            var matchingLiteralElIndex = -1;\r\n            var literalEl = undefined;\r\n            for (var i = 0; i < opt.value.length; i++) {\r\n                var el_1 = opt.value[i];\r\n                if (isLiteralElement(el_1) && PLURAL_HASHTAG_REGEX.test(el_1.value)) {\r\n                    matchingLiteralElIndex = i;\r\n                    literalEl = el_1;\r\n                    break;\r\n                }\r\n            }\r\n            if (literalEl) {\r\n                var newValue = literalEl.value.replace(PLURAL_HASHTAG_REGEX, \"$1{\" + el.value + \", number}\");\r\n                var newEls = pegParse(newValue);\r\n                (_a = opt.value).splice.apply(_a, __spreadArrays([matchingLiteralElIndex, 1], newEls));\r\n            }\r\n            normalizeHashtagInPlural(opt.value);\r\n        });\r\n    });\r\n}\r\n"]},"metadata":{},"sourceType":"module"}