{"ast":null,"code":"import axios from \"axios\";\nimport { requestHandler, successHandler, errorHandler } from \"../interceptors\";\nimport { LOGIN_URL, DASH_URL, RES_URL } from \"../../utils/Constants\"; //add your BASE_URL to Constants file\n\nexport const axiosInstance = axios.create({\n  baseURL: LOGIN_URL,\n  headers: {\n    \"Content-Type\": \"application/json\"\n  }\n});\nexport const axiosinstance = axios.create(console.log(\"hi\", localStorage.token), {\n  baseURL: DASH_URL,\n  headers: {\n    'Authorization': `Bearer ${localStorage.token}`,\n    'Content-type': 'application/json'\n  }\n});\nexport const axiosinstances = axios.create({\n  baseURL: RES_URL,\n  headers: {\n    'Authorization': `Bearer ${localStorage.token}`,\n    'Content-type': 'application/json'\n  }\n});\nexport const fetchData = values => axios.post(LOGIN_URL, values).then(res => res.data.data.token); //change this\n\nexport const fetchdata = () => axios.get(DASH_URL, {\n  headers: {\n    'Authorization': `Bearer ${localStorage.token}`,\n    'Content-type': 'application/json'\n  }\n}).then(res => res.data.data.results);\nexport const fetchdata1 = () => axios.get(RES_URL, {\n  headers: {\n    'Authorization': `Bearer ${localStorage.token}`,\n    'Content-type': 'application/json'\n  }\n}); // Handle request process\n\naxiosInstance.interceptors.request.use(request => requestHandler(request)); // Handle response process\n\naxiosInstance.interceptors.response.use(response => successHandler(response), error => errorHandler(error));\naxiosinstance.interceptors.request.use(request => requestHandler(request)); // Handle response process\n\naxiosinstance.interceptors.response.use(response => successHandler(response), error => errorHandler(error));","map":{"version":3,"sources":["C:/Users/91987/Desktop/Newput/needy/react-redux/src/network/apis/index.js"],"names":["axios","requestHandler","successHandler","errorHandler","LOGIN_URL","DASH_URL","RES_URL","axiosInstance","create","baseURL","headers","axiosinstance","console","log","localStorage","token","axiosinstances","fetchData","values","post","then","res","data","fetchdata","get","results","fetchdata1","interceptors","request","use","response","error"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,cAAT,EAAyBC,cAAzB,EAAyCC,YAAzC,QAA6D,iBAA7D;AACA,SAASC,SAAT,EAAoBC,QAApB,EAA8BC,OAA9B,QAA6C,uBAA7C,C,CAEA;;AACA,OAAO,MAAMC,aAAa,GAAGP,KAAK,CAACQ,MAAN,CAAa;AACxCC,EAAAA,OAAO,EAAEL,SAD+B;AAExCM,EAAAA,OAAO,EAAE;AACP,oBAAgB;AADT;AAF+B,CAAb,CAAtB;AAOP,OAAO,MAAMC,aAAa,GAAGX,KAAK,CAACQ,MAAN,CAE3BI,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAiBC,YAAY,CAACC,KAA9B,CAF2B,EAEU;AACrCN,EAAAA,OAAO,EAAEJ,QAD4B;AAErCK,EAAAA,OAAO,EAAE;AACP,qBAAkB,UAASI,YAAY,CAACC,KAAM,EADvC;AAEP,oBAAgB;AAFT;AAF4B,CAFV,CAAtB;AAUP,OAAO,MAAMC,cAAc,GAAEhB,KAAK,CAACQ,MAAN,CAC3B;AACEC,EAAAA,OAAO,EAAEH,OADX;AAEAI,EAAAA,OAAO,EAAE;AACP,qBAAkB,UAASI,YAAY,CAACC,KAAM,EADvC;AAEP,oBAAgB;AAFT;AAFT,CAD2B,CAAtB;AAUP,OAAO,MAAME,SAAS,GAAIC,MAAD,IAAYlB,KAAK,CAACmB,IAAN,CAAWf,SAAX,EAAsBc,MAAtB,EAA8BE,IAA9B,CAAoCC,GAAD,IAAQA,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcP,KAAzD,CAA9B,C,CAA8F;;AACrG,OAAO,MAAMQ,SAAS,GAAC,MAAMvB,KAAK,CAACwB,GAAN,CAAUnB,QAAV,EAAoB;AAC/CK,EAAAA,OAAO,EAAE;AACP,qBAAkB,UAASI,YAAY,CAACC,KAAM,EADvC;AAEP,oBAAgB;AAFT;AADsC,CAApB,EAM1BK,IAN0B,CAMpBC,GAAD,IAAOA,GAAG,CAACC,IAAJ,CAASA,IAAT,CAAcG,OANA,CAAtB;AAOP,OAAO,MAAMC,UAAU,GAAC,MAAI1B,KAAK,CAACwB,GAAN,CAAUlB,OAAV,EAAkB;AAC5CI,EAAAA,OAAO,EAAE;AACP,qBAAkB,UAASI,YAAY,CAACC,KAAM,EADvC;AAEP,oBAAgB;AAFT;AADmC,CAAlB,CAArB,C,CAMP;;AAEAR,aAAa,CAACoB,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuCD,OAAO,IAAI3B,cAAc,CAAC2B,OAAD,CAAhE,E,CACA;;AACArB,aAAa,CAACoB,YAAd,CAA2BG,QAA3B,CAAoCD,GAApC,CACEC,QAAQ,IAAI5B,cAAc,CAAC4B,QAAD,CAD5B,EAEEC,KAAK,IAAI5B,YAAY,CAAC4B,KAAD,CAFvB;AAKApB,aAAa,CAACgB,YAAd,CAA2BC,OAA3B,CAAmCC,GAAnC,CAAuCD,OAAO,IAAI3B,cAAc,CAAC2B,OAAD,CAAhE,E,CACA;;AACAjB,aAAa,CAACgB,YAAd,CAA2BG,QAA3B,CAAoCD,GAApC,CACEC,QAAQ,IAAI5B,cAAc,CAAC4B,QAAD,CAD5B,EAEEC,KAAK,IAAI5B,YAAY,CAAC4B,KAAD,CAFvB","sourcesContent":["import axios from \"axios\";\r\nimport { requestHandler, successHandler, errorHandler } from \"../interceptors\";\r\nimport { LOGIN_URL, DASH_URL, RES_URL } from \"../../utils/Constants\";\r\n\r\n//add your BASE_URL to Constants file\r\nexport const axiosInstance = axios.create({\r\n  baseURL: LOGIN_URL,\r\n  headers: {\r\n    \"Content-Type\": \"application/json\"\r\n  }\r\n});\r\n\r\nexport const axiosinstance = axios.create(\r\n\r\n  console.log(\"hi\",localStorage.token),{\r\n  baseURL: DASH_URL,\r\n  headers: {\r\n    'Authorization': `Bearer ${localStorage.token}`,\r\n    'Content-type': 'application/json'\r\n  },\r\n})\r\n\r\nexport const axiosinstances= axios.create(\r\n  {\r\n    baseURL: RES_URL,\r\n  headers: {\r\n    'Authorization': `Bearer ${localStorage.token}`,\r\n    'Content-type': 'application/json'\r\n  },\r\n}\r\n)\r\n\r\nexport const fetchData = (values) => axios.post(LOGIN_URL, values).then((res)=> res.data.data.token) //change this\r\nexport const fetchdata=() => axios.get(DASH_URL, {\r\n  headers: {\r\n    'Authorization': `Bearer ${localStorage.token}`,\r\n    'Content-type': 'application/json'\r\n  },\r\n\r\n}).then((res)=>res.data.data.results)\r\nexport const fetchdata1=()=>axios.get(RES_URL,{\r\n  headers: {\r\n    'Authorization': `Bearer ${localStorage.token}`,\r\n    'Content-type': 'application/json'\r\n  },\r\n})\r\n// Handle request process\r\n\r\naxiosInstance.interceptors.request.use(request => requestHandler(request));\r\n// Handle response process\r\naxiosInstance.interceptors.response.use(\r\n  response => successHandler(response),\r\n  error => errorHandler(error)\r\n);\r\n\r\naxiosinstance.interceptors.request.use(request => requestHandler(request));\r\n// Handle response process\r\naxiosinstance.interceptors.response.use(\r\n  response => successHandler(response),\r\n  error => errorHandler(error)\r\n);\r\n"]},"metadata":{},"sourceType":"module"}