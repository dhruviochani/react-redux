{"ast":null,"code":"import { takeLatest, put, call, fork, all, take, delay } from \"redux-saga/effects\";\nimport { loadUsersSuccess, loadUsersError, createUserSuccess, createUserError, deleteUserSuccess, deleteUserError, updateUserSuccess, updateUserError } from \"./DashboardAction\";\nimport { loadUsersApi } from \"./DashboardApis\";\nimport * as types from \"./DashboardTypes\";\nexport function* onLoadUsersStartAsync() {\n  try {\n    const response = yield call(loadUsersApi);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(loadUsersSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(loadUsersError(error));\n  }\n}\nexport function* onLoadUsers() {\n  yield takeLatest(types.LOAD_USERS_START, onLoadUsersStartAsync);\n}\nconst userSagas = [fork(onLoadUsers)];\nexport default function* rootSaga() {\n  yield all([...userSagas]);\n}","map":{"version":3,"sources":["C:/Users/91987/Desktop/Newput/needy_red/react-redux/src/store/Dashboard/DashboardSagas.js"],"names":["takeLatest","put","call","fork","all","take","delay","loadUsersSuccess","loadUsersError","createUserSuccess","createUserError","deleteUserSuccess","deleteUserError","updateUserSuccess","updateUserError","loadUsersApi","types","onLoadUsersStartAsync","response","status","data","error","onLoadUsers","LOAD_USERS_START","userSagas","rootSaga"],"mappings":"AAAA,SACEA,UADF,EAEEC,GAFF,EAGEC,IAHF,EAIEC,IAJF,EAKEC,GALF,EAMEC,IANF,EAOEC,KAPF,QAQO,oBARP;AASA,SACEC,gBADF,EAEEC,cAFF,EAGEC,iBAHF,EAIEC,eAJF,EAKEC,iBALF,EAMEC,eANF,EAOEC,iBAPF,EAQEC,eARF,QASO,mBATP;AAUA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,OAAO,KAAKC,KAAZ,MAAuB,kBAAvB;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMhB,IAAI,CAACa,YAAD,CAA3B;;AACA,QAAIG,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMb,KAAK,CAAC,GAAD,CAAX;AACA,YAAML,GAAG,CAACM,gBAAgB,CAACW,QAAQ,CAACE,IAAV,CAAjB,CAAT;AACD;AACF,GAND,CAME,OAAOC,KAAP,EAAc;AACd,UAAMpB,GAAG,CAACO,cAAc,CAACa,KAAD,CAAf,CAAT;AACD;AACF;AAED,OAAO,UAAUC,WAAV,GAAwB;AAC7B,QAAMtB,UAAU,CAACgB,KAAK,CAACO,gBAAP,EAAyBN,qBAAzB,CAAhB;AACD;AAGD,MAAMO,SAAS,GAAG,CAChBrB,IAAI,CAACmB,WAAD,CADY,CAAlB;AAIA,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMrB,GAAG,CAAC,CAAC,GAAGoB,SAAJ,CAAD,CAAT;AACD","sourcesContent":["import {\r\n  takeLatest,\r\n  put,\r\n  call,\r\n  fork,\r\n  all,\r\n  take,\r\n  delay,\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  loadUsersSuccess,\r\n  loadUsersError,\r\n  createUserSuccess,\r\n  createUserError,\r\n  deleteUserSuccess,\r\n  deleteUserError,\r\n  updateUserSuccess,\r\n  updateUserError,\r\n} from \"./DashboardAction\";\r\nimport { loadUsersApi } from \"./DashboardApis\";\r\n\r\nimport * as types from \"./DashboardTypes\";\r\n\r\nexport function* onLoadUsersStartAsync() {\r\n  try {\r\n    const response = yield call(loadUsersApi);\r\n    if (response.status === 200) {\r\n      yield delay(500);\r\n      yield put(loadUsersSuccess(response.data));\r\n    }\r\n  } catch (error) {\r\n    yield put(loadUsersError(error));\r\n  }\r\n}\r\n\r\nexport function* onLoadUsers() {\r\n  yield takeLatest(types.LOAD_USERS_START, onLoadUsersStartAsync);\r\n}\r\n\r\n\r\nconst userSagas = [\r\n  fork(onLoadUsers),\r\n];\r\n\r\nexport default function* rootSaga() {\r\n  yield all([...userSagas]);\r\n}"]},"metadata":{},"sourceType":"module"}