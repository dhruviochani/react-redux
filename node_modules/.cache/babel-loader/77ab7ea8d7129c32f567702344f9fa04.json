{"ast":null,"code":"import { takeLatest, put, call, fork, all, take, delay } from \"redux-saga/effects\";\nimport { loadUsersSuccess, loadUsersError, createUserSuccess, createUserError, deleteUserSuccess, deleteUserError, updateUserSuccess, updateUserError } from \"./actions\";\nimport { loadUsersApi, createUserApi, deleteUserApi, updateUserApi } from \"./api\";\nimport * as types from \"./actionType\";\nexport function* onLoadUsersStartAsync() {\n  try {\n    const response = yield call(loadUsersApi);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(loadUsersSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(loadUsersError(error));\n  }\n}\n\nfunction* deleteUser(userId) {\n  try {\n    const response = yield call(deleteUserApi, userId);\n\n    if (response.status === 200) {\n      yield delay(500);\n      yield put(deleteUserSuccess(userId));\n    }\n  } catch (error) {\n    yield put(deleteUserError(error));\n  }\n}\n\nfunction* onDeleteUserRequest() {\n  while (true) {\n    const {\n      payload: id\n    } = yield take(types.DELETE_USER_START);\n    yield call(deleteUser, id);\n  }\n}\n\nfunction* onCreateUserStartAsync({\n  payload\n}) {\n  try {\n    const response = yield call(createUserApi, payload);\n    console.log(\"responseCreate\", response);\n\n    if (response.status === 200) {\n      yield put(createUserSuccess(response.data));\n    }\n  } catch (error) {\n    yield put(createUserError(error));\n  }\n}\n\nexport function* onLoadUsers() {\n  yield takeLatest(types.LOAD_USERS_START, onLoadUsersStartAsync);\n}\nconst userSagas = [fork(onLoadUsers)];\nexport default function* rootSaga() {\n  yield all([...userSagas]);\n}","map":{"version":3,"sources":["C:/Users/91987/Desktop/Newput/needy_red/react-redux/src/store/Dashboard/DashboardSagas.js"],"names":["takeLatest","put","call","fork","all","take","delay","loadUsersSuccess","loadUsersError","createUserSuccess","createUserError","deleteUserSuccess","deleteUserError","updateUserSuccess","updateUserError","loadUsersApi","createUserApi","deleteUserApi","updateUserApi","types","onLoadUsersStartAsync","response","status","data","error","deleteUser","userId","onDeleteUserRequest","payload","id","DELETE_USER_START","onCreateUserStartAsync","console","log","onLoadUsers","LOAD_USERS_START","userSagas","rootSaga"],"mappings":"AAAA,SACEA,UADF,EAEEC,GAFF,EAGEC,IAHF,EAIEC,IAJF,EAKEC,GALF,EAMEC,IANF,EAOEC,KAPF,QAQO,oBARP;AASA,SACEC,gBADF,EAEEC,cAFF,EAGEC,iBAHF,EAIEC,eAJF,EAKEC,iBALF,EAMEC,eANF,EAOEC,iBAPF,EAQEC,eARF,QASO,WATP;AAUA,SACEC,YADF,EAEEC,aAFF,EAGEC,aAHF,EAIEC,aAJF,QAKO,OALP;AAOA,OAAO,KAAKC,KAAZ,MAAuB,cAAvB;AAEA,OAAO,UAAUC,qBAAV,GAAkC;AACvC,MAAI;AACF,UAAMC,QAAQ,GAAG,MAAMnB,IAAI,CAACa,YAAD,CAA3B;;AACA,QAAIM,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMhB,KAAK,CAAC,GAAD,CAAX;AACA,YAAML,GAAG,CAACM,gBAAgB,CAACc,QAAQ,CAACE,IAAV,CAAjB,CAAT;AACD;AACF,GAND,CAME,OAAOC,KAAP,EAAc;AACd,UAAMvB,GAAG,CAACO,cAAc,CAACgB,KAAD,CAAf,CAAT;AACD;AACF;;AAED,UAAUC,UAAV,CAAqBC,MAArB,EAA6B;AAC3B,MAAI;AACF,UAAML,QAAQ,GAAG,MAAMnB,IAAI,CAACe,aAAD,EAAgBS,MAAhB,CAA3B;;AACA,QAAIL,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMhB,KAAK,CAAC,GAAD,CAAX;AACA,YAAML,GAAG,CAACU,iBAAiB,CAACe,MAAD,CAAlB,CAAT;AACD;AACF,GAND,CAME,OAAOF,KAAP,EAAc;AACd,UAAMvB,GAAG,CAACW,eAAe,CAACY,KAAD,CAAhB,CAAT;AACD;AACF;;AAED,UAAUG,mBAAV,GAAgC;AAC9B,SAAO,IAAP,EAAa;AACX,UAAM;AAAEC,MAAAA,OAAO,EAAEC;AAAX,QAAkB,MAAMxB,IAAI,CAACc,KAAK,CAACW,iBAAP,CAAlC;AACA,UAAM5B,IAAI,CAACuB,UAAD,EAAaI,EAAb,CAAV;AACD;AACF;;AAED,UAAUE,sBAAV,CAAiC;AAAEH,EAAAA;AAAF,CAAjC,EAA8C;AAC5C,MAAI;AACF,UAAMP,QAAQ,GAAG,MAAMnB,IAAI,CAACc,aAAD,EAAgBY,OAAhB,CAA3B;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BZ,QAA9B;;AACA,QAAIA,QAAQ,CAACC,MAAT,KAAoB,GAAxB,EAA6B;AAC3B,YAAMrB,GAAG,CAACQ,iBAAiB,CAACY,QAAQ,CAACE,IAAV,CAAlB,CAAT;AACD;AACF,GAND,CAME,OAAOC,KAAP,EAAc;AACd,UAAMvB,GAAG,CAACS,eAAe,CAACc,KAAD,CAAhB,CAAT;AACD;AACF;;AAGD,OAAO,UAAUU,WAAV,GAAwB;AAC7B,QAAMlC,UAAU,CAACmB,KAAK,CAACgB,gBAAP,EAAyBf,qBAAzB,CAAhB;AACD;AAGD,MAAMgB,SAAS,GAAG,CAChBjC,IAAI,CAAC+B,WAAD,CADY,CAAlB;AAIA,eAAe,UAAUG,QAAV,GAAqB;AAClC,QAAMjC,GAAG,CAAC,CAAC,GAAGgC,SAAJ,CAAD,CAAT;AACD","sourcesContent":["import {\r\n  takeLatest,\r\n  put,\r\n  call,\r\n  fork,\r\n  all,\r\n  take,\r\n  delay,\r\n} from \"redux-saga/effects\";\r\nimport {\r\n  loadUsersSuccess,\r\n  loadUsersError,\r\n  createUserSuccess,\r\n  createUserError,\r\n  deleteUserSuccess,\r\n  deleteUserError,\r\n  updateUserSuccess,\r\n  updateUserError,\r\n} from \"./actions\";\r\nimport {\r\n  loadUsersApi,\r\n  createUserApi,\r\n  deleteUserApi,\r\n  updateUserApi,\r\n} from \"./api\";\r\n\r\nimport * as types from \"./actionType\";\r\n\r\nexport function* onLoadUsersStartAsync() {\r\n  try {\r\n    const response = yield call(loadUsersApi);\r\n    if (response.status === 200) {\r\n      yield delay(500);\r\n      yield put(loadUsersSuccess(response.data));\r\n    }\r\n  } catch (error) {\r\n    yield put(loadUsersError(error));\r\n  }\r\n}\r\n\r\nfunction* deleteUser(userId) {\r\n  try {\r\n    const response = yield call(deleteUserApi, userId);\r\n    if (response.status === 200) {\r\n      yield delay(500);\r\n      yield put(deleteUserSuccess(userId));\r\n    }\r\n  } catch (error) {\r\n    yield put(deleteUserError(error));\r\n  }\r\n}\r\n\r\nfunction* onDeleteUserRequest() {\r\n  while (true) {\r\n    const { payload: id } = yield take(types.DELETE_USER_START);\r\n    yield call(deleteUser, id);\r\n  }\r\n}\r\n\r\nfunction* onCreateUserStartAsync({ payload }) {\r\n  try {\r\n    const response = yield call(createUserApi, payload);\r\n    console.log(\"responseCreate\", response);\r\n    if (response.status === 200) {\r\n      yield put(createUserSuccess(response.data));\r\n    }\r\n  } catch (error) {\r\n    yield put(createUserError(error));\r\n  }\r\n}\r\n\r\n\r\nexport function* onLoadUsers() {\r\n  yield takeLatest(types.LOAD_USERS_START, onLoadUsersStartAsync);\r\n}\r\n\r\n\r\nconst userSagas = [\r\n  fork(onLoadUsers),\r\n];\r\n\r\nexport default function* rootSaga() {\r\n  yield all([...userSagas]);\r\n}"]},"metadata":{},"sourceType":"module"}