{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\91987\\\\Desktop\\\\Newput\\\\needy_red\\\\react-redux\\\\src\\\\containers\\\\dashboard\\\\dashboard.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport '../../css/Dashboard.css';\nimport _ from 'lodash'; // import { isDisabled } from '@testing-library/user-event/dist/utils';\n\nimport Auth from '../../utils/Auth';\nimport { fetchdata } from '../../network/apis';\nimport { loadUsersStart, loadUsersError, loadUsersSuccess } from '../../store/Dashboard/DashboardAction';\nimport { connect } from 'react-redux';\n\nconst Dashboard = () => {\n  const [myData, setMyData] = useState([]);\n  const [paginatedData, setPaginatedData] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [maxContent, setMaxContent] = useState(4);\n  const totalPages = Math.ceil(myData.length / maxContent);\n  const [count, setCount] = useState(2);\n  useEffect(() => {\n    const t = fetchdata();\n    setMyData(t);\n    setPaginatedData(_(t).slice(0).take(maxContent).value());\n    this.props.loadUsersStart();\n    console.log(myData);\n  }, []);\n\n  const pagination = pageNo => {\n    setCurrentPage(pageNo);\n    const startIndex = (pageNo - 1) * maxContent;\n\n    const paginatedSinglePageData = _(myData).slice(startIndex).take(maxContent).value();\n\n    setPaginatedData(paginatedSinglePageData);\n  };\n\n  const lastPage = () => {\n    pagination(totalPages);\n  };\n\n  const nextPage = () => {\n    pagination(currentPage + 1);\n  };\n\n  const firstPage = () => {\n    pagination(1);\n  };\n\n  const previousPage = () => {\n    console.log(currentPage);\n    pagination(currentPage - 1);\n  };\n\n  const handleLogout = () => {\n    localStorage.clear();\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 9\n    }\n  }) //     <div className='dashboard'>\n  //         <h1 className='dashboardHead toptitle mb-lg-3'>Needy</h1>\n  //         <div className='d-flex justify-content-center'>\n  //             <button className='btn btn-needy text-light mt-3 mx-auto' id='submit' type='submit' onClick={()=> Auth.signOut()}>LOG OUT</button>\n  //         </div>\n  //   <ul className=\"sidebar\">\n  //     <h1 className='sidebarHead'>Support</h1>\n  //     <hr className='headline' />\n  //     <li className='sideOption'>Needy</li>\n  //     <li className='sideOption'>Resources</li>\n  //     <li className='sideOption'>Allotment Form</li>\n  //     <li className='sideOption' href=\"#news\">Allotment Data</li>\n  //     <li className='sideOption' href=\"#contact\">Check Due</li>\n  //   </ul>\n  //   <table className=\"table\">\n  //     <thead className='tabHead'>\n  //       <tr>\n  //         <th scope=\"col\" >Name</th>\n  //         <th scope=\"col\">Email</th>\n  //         <th scope=\"col\">Country</th>\n  //         <th scope=\"col\">Slogan</th>\n  //         <th scope=\"col\">Timing</th>\n  //         <th scope=\"col\">Action</th>\n  //       </tr>\n  //     </thead>\n  //     <tbody>\n  //       {paginatedData.map((item, i) => (\n  //         <tr className='rows' key={i}>\n  //           <td>{item.name}.</td>\n  //           <td>{item.website}</td>\n  //           <td>{item.country}</td>\n  //           <td>{item.slogan}</td>\n  //           <td>{item.established}</td>\n  //           {/* <td><div>{item.technology.map((lang, j) => { return <span key={Math.random*10}>{lang.language}, </span> })}</div></td>\n  //           <td><div>{item.timing.map((time, k) => { return <span key={Math.random*100}>{time.startTime} to {time.endTime}<br /></span> })}</div></td> */}\n  //         </tr>\n  //       ))}\n  //     </tbody>\n  //   </table>\n  //   <div className='footer'>\n  //     {totalPages === 1 ? <></> :\n  //       <nav className='d-flex justify-content-center'>\n  //         <ul className='pagination'>\n  //           <button className='previous-btn' type=\"button\" onClick={ firstPage}>First</button>\n  //           <li className='previous' onClick={previousPage}><i className=\"fa-solid fa-angle-left fa-2x mx-2\"></i></li>\n  //           {[...Array(totalPages)].map((a, i) => {\n  //             if ((i + 1 <= currentPage - 2 && i + 1 >= currentPage - 5) || (i + 1 >= currentPage + 2 && i + 1 <= currentPage + 5)) {\n  //               return <div >.</div>\n  //             } else if (i + 1 < currentPage - 5 || i + 1 > currentPage + 5) {\n  //               return <div ></div>\n  //             }\n  //             return (<li className={\n  //               (i + 1) === currentPage ? 'page-item active' : 'page-item'}>\n  //               <p className='page-link' onClick={() => {\n  //                 pagination(i + 1)\n  //               }}>{i + 1}</p>\n  //             </li>\n  //             )\n  //           })}\n  //           <li className='next' type=\"button\" onClick={nextPage}><i className=\"fa-solid fa-angle-right fa-2x mx-2\"></i></li>\n  //           <button className='next-btn' type=\"button\" onClick={lastPage}>Last</button>\n  //         </ul>\n  //       </nav>\n  //     }\n  //   </div>\n  //     </div>\n  ;\n};\n\nconst mapStateToProps = state => ({\n  data: state.data\n});\n\nconst mapDispatchToProps = dispatch => ({\n  LOAD_USERS_START: payload => {\n    dispatch(loadUsersStart(payload));\n  }\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);","map":{"version":3,"sources":["C:/Users/91987/Desktop/Newput/needy_red/react-redux/src/containers/dashboard/dashboard.js"],"names":["React","useState","useEffect","Link","_","Auth","fetchdata","loadUsersStart","loadUsersError","loadUsersSuccess","connect","Dashboard","myData","setMyData","paginatedData","setPaginatedData","currentPage","setCurrentPage","maxContent","setMaxContent","totalPages","Math","ceil","length","count","setCount","t","slice","take","value","props","console","log","pagination","pageNo","startIndex","paginatedSinglePageData","lastPage","nextPage","firstPage","previousPage","handleLogout","localStorage","clear","mapStateToProps","state","data","mapDispatchToProps","dispatch","LOAD_USERS_START","payload"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport '../../css/Dashboard.css';\r\nimport _ from 'lodash';\r\n// import { isDisabled } from '@testing-library/user-event/dist/utils';\r\nimport Auth from '../../utils/Auth';\r\nimport { fetchdata } from '../../network/apis';\r\nimport { loadUsersStart,loadUsersError, loadUsersSuccess } from '../../store/Dashboard/DashboardAction';\r\nimport { connect } from 'react-redux' ;\r\n\r\nconst Dashboard = () => {\r\n    const [myData, setMyData] = useState([]);\r\n    const [paginatedData, setPaginatedData] = useState([]);\r\n    const [currentPage, setCurrentPage] = useState(1)\r\n    const [maxContent, setMaxContent] = useState(4)\r\n    const totalPages = Math.ceil(myData.length / maxContent);\r\n    const [count, setCount] = useState(2);\r\n    \r\n    useEffect(()=>{\r\n        const t= fetchdata();\r\n        setMyData(t);\r\n        setPaginatedData(_(t).slice(0).take(maxContent).value())\r\n        this.props.loadUsersStart()\r\n        console.log(myData);\r\n    },[])\r\n\r\n    const pagination = (pageNo) => {\r\n        setCurrentPage(pageNo);\r\n        const startIndex = (pageNo - 1) * maxContent;\r\n        const paginatedSinglePageData = _(myData).slice(startIndex).take(maxContent).value();\r\n        setPaginatedData(paginatedSinglePageData);\r\n      }\r\n    \r\n      const lastPage = () => {\r\n        pagination(totalPages);\r\n    \r\n      }\r\n    \r\n      const nextPage = () => {\r\n        pagination(currentPage + 1)\r\n      }\r\n    \r\n      const firstPage = () => {\r\n        pagination(1)\r\n      }\r\n    \r\n      const previousPage = () => {\r\n        console.log(currentPage);\r\n        pagination(currentPage - 1)\r\n      }\r\n    \r\n      const handleLogout = () => {\r\n        localStorage.clear()\r\n      }\r\n\r\n    return(\r\n        <div></div>\r\n    //     <div className='dashboard'>\r\n    //         <h1 className='dashboardHead toptitle mb-lg-3'>Needy</h1>\r\n    //         <div className='d-flex justify-content-center'>\r\n    //             <button className='btn btn-needy text-light mt-3 mx-auto' id='submit' type='submit' onClick={()=> Auth.signOut()}>LOG OUT</button>\r\n    //         </div>\r\n    //   <ul className=\"sidebar\">\r\n    //     <h1 className='sidebarHead'>Support</h1>\r\n    //     <hr className='headline' />\r\n    //     <li className='sideOption'>Needy</li>\r\n    //     <li className='sideOption'>Resources</li>\r\n    //     <li className='sideOption'>Allotment Form</li>\r\n    //     <li className='sideOption' href=\"#news\">Allotment Data</li>\r\n    //     <li className='sideOption' href=\"#contact\">Check Due</li>\r\n    //   </ul>\r\n\r\n    //   <table className=\"table\">\r\n    //     <thead className='tabHead'>\r\n    //       <tr>\r\n    //         <th scope=\"col\" >Name</th>\r\n    //         <th scope=\"col\">Email</th>\r\n    //         <th scope=\"col\">Country</th>\r\n    //         <th scope=\"col\">Slogan</th>\r\n    //         <th scope=\"col\">Timing</th>\r\n    //         <th scope=\"col\">Action</th>\r\n    //       </tr>\r\n    //     </thead>\r\n    //     <tbody>\r\n\r\n    //       {paginatedData.map((item, i) => (\r\n    //         <tr className='rows' key={i}>\r\n    //           <td>{item.name}.</td>\r\n    //           <td>{item.website}</td>\r\n    //           <td>{item.country}</td>\r\n    //           <td>{item.slogan}</td>\r\n    //           <td>{item.established}</td>\r\n    //           {/* <td><div>{item.technology.map((lang, j) => { return <span key={Math.random*10}>{lang.language}, </span> })}</div></td>\r\n    //           <td><div>{item.timing.map((time, k) => { return <span key={Math.random*100}>{time.startTime} to {time.endTime}<br /></span> })}</div></td> */}\r\n    //         </tr>\r\n    //       ))}\r\n\r\n    //     </tbody>\r\n    //   </table>\r\n    //   <div className='footer'>\r\n    //     {totalPages === 1 ? <></> :\r\n    //       <nav className='d-flex justify-content-center'>\r\n    //         <ul className='pagination'>\r\n    //           <button className='previous-btn' type=\"button\" onClick={ firstPage}>First</button>\r\n    //           <li className='previous' onClick={previousPage}><i className=\"fa-solid fa-angle-left fa-2x mx-2\"></i></li>\r\n    //           {[...Array(totalPages)].map((a, i) => {\r\n    //             if ((i + 1 <= currentPage - 2 && i + 1 >= currentPage - 5) || (i + 1 >= currentPage + 2 && i + 1 <= currentPage + 5)) {\r\n    //               return <div >.</div>\r\n    //             } else if (i + 1 < currentPage - 5 || i + 1 > currentPage + 5) {\r\n    //               return <div ></div>\r\n    //             }\r\n    //             return (<li className={\r\n    //               (i + 1) === currentPage ? 'page-item active' : 'page-item'}>\r\n    //               <p className='page-link' onClick={() => {\r\n    //                 pagination(i + 1)\r\n    //               }}>{i + 1}</p>\r\n    //             </li>\r\n    //             )\r\n    //           })}\r\n    //           <li className='next' type=\"button\" onClick={nextPage}><i className=\"fa-solid fa-angle-right fa-2x mx-2\"></i></li>\r\n    //           <button className='next-btn' type=\"button\" onClick={lastPage}>Last</button>\r\n    //         </ul>\r\n\r\n    //       </nav>\r\n    //     }\r\n    //   </div>\r\n    //     </div>\r\n    )\r\n    }\r\n    const mapStateToProps = (state) => ({\r\n        data: state.data,\r\n      });\r\n    const mapDispatchToProps = (dispatch) => ({\r\n        LOAD_USERS_START : payload => \r\n        {\r\n          dispatch(loadUsersStart(payload));\r\n        }\r\n      });\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);"]},"metadata":{},"sourceType":"module"}